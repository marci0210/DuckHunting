void demoUpperSegments() {
   // Turn on all segments one-by-one
   // Only one segment is turned on at any given time
   // Using 7 bit binary (raw) value
   for (uint8_t p = 0; p < SEGMENT_LCD_NUM_OF_UPPER_CHARS; p++) {
      for (uint8_t s = 0; s < 8; s++) {
         upperCharSegments[p].raw = 1 << s;
         SegmentLCD_UpperSegments(upperCharSegments);
         delay();
      }
   }

   // Turn on all segments one-by-one
   // All the previous segments are left turned on
   // Using dedicated (bit field) values
   for (uint8_t p = 0; p < SEGMENT_LCD_NUM_OF_UPPER_CHARS; p++) {
      upperCharSegments[p].a = 1;
      SegmentLCD_UpperSegments(upperCharSegments);
      delay();

      upperCharSegments[p].b = 1;
      SegmentLCD_UpperSegments(upperCharSegments);
      delay();

      upperCharSegments[p].c = 1;
      SegmentLCD_UpperSegments(upperCharSegments);
      delay();

      upperCharSegments[p].d = 1;
      SegmentLCD_UpperSegments(upperCharSegments);
      delay();

      upperCharSegments[p].e = 1;
      SegmentLCD_UpperSegments(upperCharSegments);
      delay();

      upperCharSegments[p].f = 1;
      SegmentLCD_UpperSegments(upperCharSegments);
      delay();

      upperCharSegments[p].g = 1;
      SegmentLCD_UpperSegments(upperCharSegments);
      delay();
   }

   // Clear all segments
   for (uint8_t p = 0; p < SEGMENT_LCD_NUM_OF_UPPER_CHARS; p++) {
      upperCharSegments[p].raw = 0;
      SegmentLCD_UpperSegments(upperCharSegments);
   }
}

/*
 * This function demonstrates the usage of the extension driver for the lower part of the LCD.
 */
void demoLowerSegments() {
   // Turn on all segments one-by-one
   // Only one segment is turned on at any given time
   // Using 14 bit binary (raw) value
   for (uint8_t p = 0; p < SEGMENT_LCD_NUM_OF_LOWER_CHARS; p++) {
      for (uint8_t s = 0; s < 15; s++) {
         lowerCharSegments[p].raw = 1 << s;
         SegmentLCD_LowerSegments(lowerCharSegments);
         delay();
      }
   }

   // Turn on all segments one-by-one
   // All the previous segments are left turned on
   // Using dedicated (bit field) values
   for (uint8_t p = 0; p < SEGMENT_LCD_NUM_OF_LOWER_CHARS; p++) {
      lowerCharSegments[p].a = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].b = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].c = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].d = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].e = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].f = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].g = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].h = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].j = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].k = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].m = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].n = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].p = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();

      lowerCharSegments[p].q = 1;
      SegmentLCD_LowerSegments(lowerCharSegments);
      delay();
   }

   // Clear all segments
   for (uint8_t p = 0; p < SEGMENT_LCD_NUM_OF_LOWER_CHARS; p++) {
      lowerCharSegments[p].raw = 0;
      SegmentLCD_LowerSegments(lowerCharSegments);
   }
}

#include <stdint.h>
#include <stdbool.h>
#include "em_device.h"
#include "em_chip.h"
#include "em_cmu.h"
#include "bsp.h"
#include "segmentlcd.h"
#include "bsp_trace.h"

SegmentLCD_Symbol(LCD_SYMBOL_GECKO, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_ANT, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_PAD0, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_PAD1, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_EFM32, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_MINUS, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_COL3, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_COL5, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_COL10, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_DEGC, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_DEGF, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_DP2, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_DP3, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_DP4, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_DP5, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_DP6, 1);
    SegmentLCD_Symbol(LCD_SYMBOL_DP10, 1);
    LCD.C